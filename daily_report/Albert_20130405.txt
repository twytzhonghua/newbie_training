
/*
*************hello.c***************
*/

#include <linux/init.h>
#include <linux/module.h>
MODULE_LICENSE("Dual BSD/GPL");

static int hello_init(void)
{
	printk(KERN_ALERT "Hello, beautiful world!\n");
	return 0;
}

static void hello_exit(void)
{
	printk(KERN_ALERT "Goodbye, cruel world!\n");
}

module_init(hello_init);
module_exit(hello_exit);


MODULE_AUTHOR("Albert Yang");



最近两天在看linux内核模块，上面是今天编写的第一个模块程序

模块特点：1.本身不会被编译进内核镜像，从而控制了内核大小
        2.模块一旦被加载，它就和内核中的其他部分一样

MODULE_LICENSE("Dual BSD/GPL"); 采用的是BSD/GPL双LICENSE，这是linux 2.6内核中最常见的。

hello_init(); 是内核模块加载函数，此函数必须以module_init(hello_init)来指定
hello_exit(); 是内核模块卸载函数，此函数必须以module_exit(hello_exit)来指定

模块的声明和描述MODULE_AUTHOR   MODULE_DESCRIPTION MODULE_VERSION MODULE_DEVICE_TABLE MODULE_ALLAS来声明 但不是必须的。




/*
***************Makefile**************
*/
obj-m := hello.o



编译 make -C /usr/src/linux-headers-2.6.38-8-generic/ M=/home/william/Desktop/ZH/01 modules
结果：
make: Entering directory `/usr/src/linux-headers-2.6.38-8-generic'
  CC [M]  /home/william/Desktop/ZH/01/hello.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/william/Desktop/ZH/01/hello.mod.o
  LD [M]  /home/william/Desktop/ZH/01/hello.ko
make: Leaving directory `/usr/src/linux-headers-2.6.38-8-generic'



加载模块：sudo insmod ./hello.ko
        dmesg 可以看到[28503.021907] Hello, beautiful world!
卸载模块：sudo rmmod hello
        dmesg 可以看到[28556.370970] Goodbye, cruel world!
 





